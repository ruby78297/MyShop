{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Row, Col, Image, ListGroup, FormControl, Button } from \"react-bootstrap\";\nimport { Link, useParams, useNavigate, useLocation } from \"react-router-dom\";\nimport { addToCart } from \"../actions/cartActions\";\nimport Message from \"../Components/Message\";\nconst CartScreen = () => {\n  _s();\n  const productId = useParams();\n  const location = useLocation();\n  const qty = location.search ? Number(location.search.split(\"=\")[1]) : 1;\n  const dispatch = useDispatch();\n  const cart = useSelector(state => state.cart);\n  const {\n    cartItems\n  } = cart;\n  useEffect(() => {\n    if (productId) {\n      dispatch(addToCart(productId, qty));\n    }\n  }, [dispatch, productId, qty]);\n\n  // const removeFromCartHandler = (id) => {\n  //   // dispatch(removeFromCart(productId));\n  //   console.log(\"remove\");\n  // };\n\n  // return (\n  //   <Row>\n  //     <Col md={8}>\n  //       <h1>Shopping Cart</h1>\n  //       {cartItems.length === 0 ? (\n  //         <Message>\n  //           Your Cart is Empty. <Link to={\"/\"}>Go Back</Link>\n  //         </Message>\n  //       ) : (\n  //         <ListGroup variant=\"flush\">\n  //           {cartItems.map((item) => (\n  //             <ListGroup.Item key={item.product}>\n  //               <Row>\n  //                 <Col md={2}>\n  //                   <Image src={item.image} alt={item.name} fluid rounded />\n  //                 </Col>\n  //                 <Col md={3}>\n  //                   <Link to={`/product/${item.product}`}>{item.name}</Link>\n  //                 </Col>\n  //                 <Col md={2}>${item.price}</Col>\n  //                 <Col md={2}>\n  //                   <FormControl\n  //                     as=\"select\"\n  //                     value={item.qty}\n  //                     onChange={(e) =>\n  //                       dispatch(\n  //                         addToCart(item.product, Number(e.target.value))\n  //                       )\n  //                     }\n  //                   >\n  //                     {[...Array(item.countInStock).keys()].map((x) => (\n  //                       <option key={x + 1} value={x + 1}>\n  //                         {x + 1}\n  //                       </option>\n  //                     ))}\n  //                   </FormControl>\n  //                 </Col>\n  //                 <Col md={2}>\n  //                   <Button\n  //                     type=\"button\"\n  //                     variant=\"light\"\n  //                     onClick={() => removeFromCartHandler(item.product)}\n  //                   >\n  //                     <i className=\"fas fa-trash\"></i>\n  //                   </Button>\n  //                 </Col>\n  //               </Row>\n  //             </ListGroup.Item>\n  //           ))}\n  //         </ListGroup>\n  //       )}\n  //     </Col>\n  //     <Col md={2}></Col>\n  //     <Col md={2}></Col>\n  //     <Col md={2}>\n  //       <ListGroup.Item>\n  //         <h2>\n  //           Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)})\n  //           items\n  //         </h2>\n  //         $\n  //         {cartItems\n  //           .reduce((acc, item) => acc + item.qty * item.price, 0)\n  //           .toFixed(2)}\n  //         <Button\n  //           type=\"button\"\n  //           className=\"btn-block\"\n  //           disabled={cartItems.length === 0}\n  //         >\n  //           Proceed to Checkout\n  //         </Button>\n  //       </ListGroup.Item>\n  //     </Col>\n  //   </Row>\n  // );\n};\n_s(CartScreen, \"m9ffVktnHbot9+voNYGH3a2JI8U=\", false, function () {\n  return [useParams, useLocation, useDispatch, useSelector];\n});\n_c = CartScreen;\nexport default CartScreen;\nvar _c;\n$RefreshReg$(_c, \"CartScreen\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","Row","Col","Image","ListGroup","FormControl","Button","Link","useParams","useNavigate","useLocation","addToCart","Message","CartScreen","_s","productId","location","qty","search","Number","split","dispatch","cart","state","cartItems","_c","$RefreshReg$"],"sources":["C:/MyShop/frontend/src/screens/CartScreen.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Image,\r\n  ListGroup,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport { Link, useParams, useNavigate, useLocation } from \"react-router-dom\";\r\nimport { addToCart } from \"../actions/cartActions\";\r\nimport Message from \"../Components/Message\";\r\n\r\nconst CartScreen = () => {\r\n  const productId = useParams();\r\n  const location = useLocation();\r\n  const qty = location.search ? Number(location.search.split(\"=\")[1]) : 1;\r\n  const dispatch = useDispatch();\r\n  const cart = useSelector((state) => state.cart);\r\n  const { cartItems } = cart;\r\n\r\n  useEffect(() => {\r\n    if (productId) {\r\n      dispatch(addToCart(productId, qty));\r\n    }\r\n  }, [dispatch, productId, qty]);\r\n\r\n  // const removeFromCartHandler = (id) => {\r\n  //   // dispatch(removeFromCart(productId));\r\n  //   console.log(\"remove\");\r\n  // };\r\n\r\n  // return (\r\n  //   <Row>\r\n  //     <Col md={8}>\r\n  //       <h1>Shopping Cart</h1>\r\n  //       {cartItems.length === 0 ? (\r\n  //         <Message>\r\n  //           Your Cart is Empty. <Link to={\"/\"}>Go Back</Link>\r\n  //         </Message>\r\n  //       ) : (\r\n  //         <ListGroup variant=\"flush\">\r\n  //           {cartItems.map((item) => (\r\n  //             <ListGroup.Item key={item.product}>\r\n  //               <Row>\r\n  //                 <Col md={2}>\r\n  //                   <Image src={item.image} alt={item.name} fluid rounded />\r\n  //                 </Col>\r\n  //                 <Col md={3}>\r\n  //                   <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n  //                 </Col>\r\n  //                 <Col md={2}>${item.price}</Col>\r\n  //                 <Col md={2}>\r\n  //                   <FormControl\r\n  //                     as=\"select\"\r\n  //                     value={item.qty}\r\n  //                     onChange={(e) =>\r\n  //                       dispatch(\r\n  //                         addToCart(item.product, Number(e.target.value))\r\n  //                       )\r\n  //                     }\r\n  //                   >\r\n  //                     {[...Array(item.countInStock).keys()].map((x) => (\r\n  //                       <option key={x + 1} value={x + 1}>\r\n  //                         {x + 1}\r\n  //                       </option>\r\n  //                     ))}\r\n  //                   </FormControl>\r\n  //                 </Col>\r\n  //                 <Col md={2}>\r\n  //                   <Button\r\n  //                     type=\"button\"\r\n  //                     variant=\"light\"\r\n  //                     onClick={() => removeFromCartHandler(item.product)}\r\n  //                   >\r\n  //                     <i className=\"fas fa-trash\"></i>\r\n  //                   </Button>\r\n  //                 </Col>\r\n  //               </Row>\r\n  //             </ListGroup.Item>\r\n  //           ))}\r\n  //         </ListGroup>\r\n  //       )}\r\n  //     </Col>\r\n  //     <Col md={2}></Col>\r\n  //     <Col md={2}></Col>\r\n  //     <Col md={2}>\r\n  //       <ListGroup.Item>\r\n  //         <h2>\r\n  //           Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)})\r\n  //           items\r\n  //         </h2>\r\n  //         $\r\n  //         {cartItems\r\n  //           .reduce((acc, item) => acc + item.qty * item.price, 0)\r\n  //           .toFixed(2)}\r\n  //         <Button\r\n  //           type=\"button\"\r\n  //           className=\"btn-block\"\r\n  //           disabled={cartItems.length === 0}\r\n  //         >\r\n  //           Proceed to Checkout\r\n  //         </Button>\r\n  //       </ListGroup.Item>\r\n  //     </Col>\r\n  //   </Row>\r\n  // );\r\n};\r\n\r\nexport default CartScreen;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SACEC,GAAG,EACHC,GAAG,EACHC,KAAK,EACLC,SAAS,EACTC,WAAW,EACXC,MAAM,QACD,iBAAiB;AACxB,SAASC,IAAI,EAAEC,SAAS,EAAEC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC5E,SAASC,SAAS,QAAQ,wBAAwB;AAClD,OAAOC,OAAO,MAAM,uBAAuB;AAE3C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,SAAS,GAAGP,SAAS,CAAC,CAAC;EAC7B,MAAMQ,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,GAAG,GAAGD,QAAQ,CAACE,MAAM,GAAGC,MAAM,CAACH,QAAQ,CAACE,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;EACvE,MAAMC,QAAQ,GAAGtB,WAAW,CAAC,CAAC;EAC9B,MAAMuB,IAAI,GAAGtB,WAAW,CAAEuB,KAAK,IAAKA,KAAK,CAACD,IAAI,CAAC;EAC/C,MAAM;IAAEE;EAAU,CAAC,GAAGF,IAAI;EAE1BxB,SAAS,CAAC,MAAM;IACd,IAAIiB,SAAS,EAAE;MACbM,QAAQ,CAACV,SAAS,CAACI,SAAS,EAAEE,GAAG,CAAC,CAAC;IACrC;EACF,CAAC,EAAE,CAACI,QAAQ,EAAEN,SAAS,EAAEE,GAAG,CAAC,CAAC;;EAE9B;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AAACH,EAAA,CA9FID,UAAU;EAAA,QACIL,SAAS,EACVE,WAAW,EAEXX,WAAW,EACfC,WAAW;AAAA;AAAAyB,EAAA,GALpBZ,UAAU;AAgGhB,eAAeA,UAAU;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}